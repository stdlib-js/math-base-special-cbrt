{
  "version": 3,
  "sources": ["../lib/polyval_p.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* This is a generated file. Do not edit directly. */\n'use strict';\n\n// MAIN //\n\n/**\n* Evaluates a polynomial.\n*\n* ## Notes\n*\n* -   The implementation uses [Horner's rule][horners-method] for efficient computation.\n*\n* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method\n*\n* @private\n* @param {number} x - value at which to evaluate the polynomial\n* @returns {number} evaluated polynomial\n*/\nfunction evalpoly( x ) {\n\tif ( x === 0.0 ) {\n\t\treturn 1.87595182427177;\n\t}\n\treturn 1.87595182427177 + (x * (-1.8849797954337717 + (x * (1.6214297201053545 + (x * (-0.758397934778766 + (x * 0.14599619288661245))))))); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cbrt.c?view=markup}. The implementation follows the original, but has been modified for JavaScript.\n*\n* ```text\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n*\n* Optimized by Bruce D. Evans.\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );\nvar SIGN_MASK = require( '@stdlib/constants-float64-high-word-sign-mask' );\nvar ABS_MASK = require( '@stdlib/constants-float64-high-word-abs-mask' );\nvar getHighWord = require( '@stdlib/number-float64-base-get-high-word' );\nvar setHighWord = require( '@stdlib/number-float64-base-set-high-word' );\nvar isinfinite = require( '@stdlib/math-base-assert-is-infinite' );\nvar fromWords = require( '@stdlib/number-float64-base-from-words' );\nvar toWords = require( '@stdlib/number-float64-base-to-words' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar polyval = require( './polyval_p.js' );\n\n\n// VARIABLES //\n\n// 2**32 - 1 = 4294967295 => 11111111111111111111111111111111\nvar HIGH_WORD_MASK = 4294967295>>>0; // asm type annotation\n\n// 2**31 + 2**30 = 3221225472 => 11000000000000000000000000000000\nvar LOW_WORD_MASK = 3221225472>>>0; // asm type annotation\n\n// 2**54\nvar TWO_54 = 18014398509481984.0;\n\n// 2**31 = 0x80000000 = 2147483648 => 1 00000000000 00000000000000000000\nvar TWO_31 = 0x80000000>>>0; // asm type annotation\n\n// 0x00000001 = 1 => 0 00000000000 00000000000000000001\nvar ONE = 0x00000001>>>0; // asm type annotation\n\n// B1 = (1023-1023/3-0.03306235651)*2**20\nvar B1 = 715094163>>>0; // asm type annotation\n\n// B2 = (1023-1023/3-54/3-0.03306235651)*2**20\nvar B2 = 696219795>>>0; // asm type annotation\n\n// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000\nvar FLOAT64_SMALLEST_NORMAL_HIGH_WORD = getHighWord( FLOAT64_SMALLEST_NORMAL ); // eslint-disable-line id-length\n\n// Words workspace:\nvar WORDS = [ 0>>>0, 0>>>0 ]; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes the cube root of a double-precision floating-point number.\n*\n* ## Method\n*\n* 1.  Rough cube root to \\\\( 5 \\\\) bits:\n*\n*     ```tex\n*     \\sqrt\\[3\\]{2^e (1+m)} \\approx 2^(e/3) \\biggl(1 + \\frac{(e \\mathrm{mod}\\ 3) + m}{3}\\biggr)\n*     ```\n*\n*     where \\\\( e \\\\) is a nonnegative integer, \\\\( m \\\\) is real and in \\\\( \\[0, 1) \\\\), and \\\\( / \\\\) and \\\\( \\mathrm{mod} \\\\) are integer division and modulus with rounding toward \\\\( -\\infty \\\\).\n*\n*     The RHS is always greater than or equal to the LHS and has a maximum relative error of about \\\\( 1 \\\\) in \\\\( 16 \\\\).\n*\n*     Adding a bias of \\\\( -0.03306235651 \\\\) to the \\\\( (e \\mathrm{mod} 3+ m )/ 3 \\\\) term reduces the error to about \\\\( 1 \\\\) in \\\\( 32 \\\\).\n*\n*     With the IEEE floating point representation, for finite positive normal values, ordinary integer division of the value in bits magically gives almost exactly the RHS of the above provided we first subtract the exponent bias (\\\\( 1023 \\\\) for doubles) and later add it back.\n*\n*     We do the subtraction virtually to keep \\\\( e \\geq 0 \\\\) so that ordinary integer division rounds toward \\\\( -\\infty \\\\); this is also efficient.\n*\n* 2.  New cube root to \\\\( 23 \\\\) bits:\n*\n*     ```tex\n*     \\sqrt[3]{x} = t \\cdot \\sqrt\\[3\\]{x/t^3} \\approx t \\mathrm{P}(t^3/x)\n*     ```\n*\n*     where \\\\( \\mathrm{P}(r) \\\\) is a polynomial of degree \\\\( 4 \\\\) that approximates \\\\( 1 / \\sqrt\\[3\\]{r} \\\\) to within \\\\( 2^{-23.5} \\\\) when \\\\( |r - 1| < 1/10 \\\\).\n*\n*     The rough approximation has produced \\\\( t \\\\) such than \\\\( |t/sqrt\\[3\\]{x} - 1| \\lesssim 1/32 \\\\), and cubing this gives us bounds for \\\\( r = t^3/x \\\\).\n*\n* 3.  Round \\\\( t \\\\) away from \\\\( 0 \\\\) to \\\\( 23 \\\\) bits (sloppily except for ensuring that the result is larger in magnitude than \\\\( \\sqrt\\[3\\]{x} \\\\) but not much more than \\\\( 2 \\\\) 23-bit ulps larger).\n*\n*     With rounding toward zero, the error bound would be \\\\( \\approx 5/6 \\\\) instead of \\\\( \\approx 4/6 \\\\).\n*\n*     With a maximum error of \\\\( 2 \\\\) 23-bit ulps in the rounded \\\\( t \\\\), the infinite-precision error in the Newton approximation barely affects the third digit in the final error \\\\( 0.667 \\\\); the error in the rounded \\\\( t \\\\) can be up to about \\\\( 3 \\\\) 23-bit ulps before the final error is larger than \\\\( 0.667 \\\\) ulps.\n*\n* 4.  Perform one step of a Newton iteration to get \\\\( 53 \\\\) bits with an error of \\\\( < 0.667 \\\\) ulps.\n*\n* @param {number} x - input value\n* @returns {number} cube root\n*\n* @example\n* var v = cbrt( 64.0 );\n* // returns 4.0\n*\n* @example\n* var v = cbrt( 27.0 );\n* // returns 3.0\n*\n* @example\n* var v = cbrt( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = cbrt( -9.0 );\n* // returns ~-2.08\n*\n* @example\n* var v = cbrt( NaN );\n* // returns NaN\n*/\nfunction cbrt( x ) {\n\tvar sgn;\n\tvar hx;\n\tvar hw;\n\tvar r;\n\tvar s;\n\tvar t;\n\tvar w;\n\tif (\n\t\tx === 0.0 || // handles +-0\n\t\tisnan( x ) ||\n\t\tisinfinite( x )\n\t) {\n\t\treturn x;\n\t}\n\thx = getHighWord( x )>>>0;\n\tsgn = (hx & SIGN_MASK)>>>0;\n\thx &= ABS_MASK;\n\n\t// Rough cbrt...\n\tif ( hx < FLOAT64_SMALLEST_NORMAL_HIGH_WORD ) {\n\t\tt = TWO_54 * x;\n\t\thw = ( getHighWord( t )&ABS_MASK )>>>0;\n\t\thw = ( ( (hw/3)>>>0 ) + B2 )>>>0;\n\t\tt = fromWords( sgn|hw, 0 );\n\t} else {\n\t\tt = 0.0;\n\t\thw = ( ( (hx/3)>>>0 ) + B1 )>>>0;\n\t\tt = setHighWord( t, sgn|hw );\n\t}\n\t// New cbrt...\n\tr = ( t*t ) * ( t/x );\n\tt *= polyval( r );\n\n\t// Round `t` away from `0` to `23` bits...\n\ttoWords.assign( t, WORDS, 1, 0 );\n\tif ( WORDS[ 1 ]&TWO_31 ) {\n\t\t// Perform manual addition, since we are split across two words...\n\t\tWORDS[ 0 ] += ONE;  // carry the one\n\t\tWORDS[ 1 ] &= ~TWO_31; // clear the bit\n\t} else {\n\t\tWORDS[ 1 ] |= TWO_31;\n\t}\n\tt = fromWords( WORDS[0]&HIGH_WORD_MASK, WORDS[1]&LOW_WORD_MASK );\n\n\t// Newton iteration...\n\ts = t * t; // `t*t` is exact\n\tr = x / s; // error `<= 0.5` ulps; `|r| < |t|`\n\tw = t + t; // `t+t` is exact\n\tr = ( r-t ) / ( w+r ); // `r-t` is exact; `w+r ~= 3*t`\n\tt += t * r; // error `<= 0.5 + 0.5/3 + eps`\n\n\treturn t;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cbrt;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cube root of a double-precision floating-point number.\n*\n* @module @stdlib/math-base-special-cbrt\n*\n* @example\n* var cbrt = require( '@stdlib/math-base-special-cbrt' );\n*\n* var v = cbrt( 64.0 );\n* // returns 4.0\n*\n* v = cbrt( 27.0 );\n* // returns 3.0\n*\n* v = cbrt( 0.0 );\n* // returns 0.0\n*\n* v = cbrt( -0.0 );\n* // returns -0.0\n*\n* v = cbrt( -9.0 );\n* // returns ~-2.08\n*\n* v = cbrt( NaN );\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAoCA,SAASC,EAAUC,EAAI,CACtB,OAAKA,IAAM,EACH,iBAED,iBAAoBA,GAAK,oBAAuBA,GAAK,mBAAsBA,GAAK,kBAAsBA,EAAI,qBAClH,CAKAF,EAAO,QAAUC,IC9CjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsCA,IAAIC,EAA0B,QAAS,2CAA4C,EAC/EC,EAAY,QAAS,+CAAgD,EACrEC,EAAW,QAAS,8CAA+C,EACnEC,EAAc,QAAS,2CAA4C,EACnEC,EAAc,QAAS,2CAA4C,EACnEC,EAAa,QAAS,sCAAuC,EAC7DC,EAAY,QAAS,wCAAyC,EAC9DC,EAAU,QAAS,sCAAuC,EAC1DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAU,IAMVC,EAAiB,WAGjBC,EAAgB,WAGhBC,EAAS,iBAGTC,EAAS,WAGTC,EAAM,EAGNC,EAAK,UAGLC,EAAK,UAGLC,EAAoCd,EAAaH,CAAwB,EAGzEkB,EAAQ,CAAE,EAAO,CAAM,EAmE3B,SAASC,EAAMC,EAAI,CAClB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,OACCP,IAAM,GACNZ,EAAOY,CAAE,GACTf,EAAYe,CAAE,EAEPA,GAERE,EAAKnB,EAAaiB,CAAE,IAAI,EACxBC,GAAOC,EAAKrB,KAAa,EACzBqB,GAAMpB,EAGDoB,EAAKL,GACTS,EAAId,EAASQ,EACbG,GAAOpB,EAAauB,CAAE,EAAExB,KAAa,EACrCqB,GAAUA,EAAG,IAAK,GAAMP,IAAO,EAC/BU,EAAIpB,EAAWe,EAAIE,EAAI,CAAE,IAEzBG,EAAI,EACJH,GAAUD,EAAG,IAAK,GAAMP,IAAO,EAC/BW,EAAItB,EAAasB,EAAGL,EAAIE,CAAG,GAG5BC,EAAME,EAAEA,GAAQA,EAAEN,GAClBM,GAAKjB,EAASe,CAAE,EAGhBjB,EAAQ,OAAQmB,EAAGR,EAAO,EAAG,CAAE,EAC1BA,EAAO,CAAE,EAAEL,GAEfK,EAAO,CAAE,GAAKJ,EACdI,EAAO,CAAE,GAAK,CAACL,GAEfK,EAAO,CAAE,GAAKL,EAEfa,EAAIpB,EAAWY,EAAM,CAAC,EAAER,EAAgBQ,EAAM,CAAC,EAAEP,CAAc,EAG/Dc,EAAIC,EAAIA,EACRF,EAAIJ,EAAIK,EACRE,EAAID,EAAIA,EACRF,GAAMA,EAAEE,IAAQC,EAAEH,GAClBE,GAAKA,EAAIF,EAEFE,EACR,CAKA3B,EAAO,QAAUoB,ICzJjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_polyval_p", "__commonJSMin", "exports", "module", "evalpoly", "x", "require_main", "__commonJSMin", "exports", "module", "FLOAT64_SMALLEST_NORMAL", "SIGN_MASK", "ABS_MASK", "getHighWord", "setHighWord", "isinfinite", "fromWords", "toWords", "isnan", "polyval", "HIGH_WORD_MASK", "LOW_WORD_MASK", "TWO_54", "TWO_31", "ONE", "B1", "B2", "FLOAT64_SMALLEST_NORMAL_HIGH_WORD", "WORDS", "cbrt", "x", "sgn", "hx", "hw", "r", "s", "t", "w", "main"]
}
